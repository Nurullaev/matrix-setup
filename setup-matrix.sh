#!/bin/bash

# Matrix Setup & Repair Tool v6.0 - Enhanced Docker Edition
# –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ root
if [ "$(id -u)" -ne 0 ]; then
  echo "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –æ—Ç root" >&2
  exit 1
fi

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
SYNAPSE_VERSION="latest"
ELEMENT_VERSION="v1.11.81"
SYNAPSE_ADMIN_VERSION="0.10.3"
REQUIRED_MIN_VERSION="1.93.0"
MATRIX_DOMAIN=""
ELEMENT_DOMAIN=""
ADMIN_DOMAIN=""
BIND_ADDRESS=""
DB_PASSWORD=""  # –ë—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
REGISTRATION_SHARED_SECRET=$(openssl rand -hex 32)
TURN_SECRET=$(openssl rand -hex 32)
ADMIN_USER="admin"
SERVER_TYPE=""
PUBLIC_IP=""
LOCAL_IP=""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
fix_system_time() {
  echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏..."
  
  if ! timedatectl status | grep -q "NTP synchronized: yes"; then
    echo "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏..."
    apt update >/dev/null 2>&1
    apt install -y ntp ntpdate >/dev/null 2>&1
    systemctl stop ntp >/dev/null 2>&1
    ntpdate -s pool.ntp.org >/dev/null 2>&1 || ntpdate -s time.nist.gov >/dev/null 2>&1
    systemctl start ntp >/dev/null 2>&1
    systemctl enable ntp >/dev/null 2>&1
    timedatectl set-ntp true >/dev/null 2>&1
    echo "–°–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"
  else
    echo "–°–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–µ—Ä–≤–µ—Ä–∞
detect_server_type() {
  PUBLIC_IP=$(curl -s -4 https://ifconfig.co || curl -s -4 https://api.ipify.org || curl -s -4 https://ifconfig.me)
  LOCAL_IP=$(hostname -I | awk '{print $1}')
  if [ "$PUBLIC_IP" != "$LOCAL_IP" ]; then
    SERVER_TYPE="proxmox"
    BIND_ADDRESS="0.0.0.0"
    echo "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ Proxmox VPS (–∏–ª–∏ –∑–∞ NAT)"
    echo "–ü—É–±–ª–∏—á–Ω—ã–π IP: $PUBLIC_IP"
    echo "–õ–æ–∫–∞–ª—å–Ω—ã–π IP: $LOCAL_IP"
    echo "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è bind address: $BIND_ADDRESS"
  else
    SERVER_TYPE="hosting"
    BIND_ADDRESS="127.0.0.1"
    echo "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥ VPS"
    echo "IP –∞–¥—Ä–µ—Å: $PUBLIC_IP"
    echo "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è bind address: $BIND_ADDRESS"
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker
install_docker() {
  echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∏ Docker Compose..."
  
  if command -v docker >/dev/null 2>&1 && systemctl is-active --quiet docker; then
    echo "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω: $(docker --version)"
    return 0
  fi
  
  echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker..."
  apt update
  apt install -y ca-certificates curl gnupg lsb-release
  
  # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Docker
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
  
  apt update
  apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
  
  # –ó–∞–ø—É—Å–∫ Docker
  systemctl enable docker
  systemctl start docker
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
  if systemctl is-active --quiet docker; then
    echo "‚úÖ Docker —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω"
    echo "   –í–µ—Ä—Å–∏—è: $(docker --version)"
    echo "   Compose: $(docker compose version)"
    return 0
  else
    echo "‚ùå –û—à–∏–±–∫–∞: Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    return 1
  fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Matrix —Å–µ—Ä–≤–∏—Å–æ–≤
check_status() {
  echo "=== –°—Ç–∞—Ç—É—Å Matrix —Å–µ—Ä–≤–∏—Å–æ–≤ ==="
  echo ""
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
  if ! command -v docker >/dev/null 2>&1; then
    echo "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    return 1
  fi
  
  if ! systemctl is-active --quiet docker; then
    echo "‚ùå Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    return 1
  fi
  
  echo "‚úÖ Docker —Ä–∞–±–æ—Ç–∞–µ—Ç: $(docker --version | cut -d' ' -f3 | tr -d ',')"
  echo ""
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  if [ ! -f "/opt/synapse-config/docker-compose.yml" ]; then
    echo "‚ùå Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    echo "   –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É (–æ–ø—Ü–∏—è 1)"
    return 1
  fi
  
  echo "üìã –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
  cd /opt/synapse-config 2>/dev/null || { echo "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"; return 1; }
  docker compose ps
  echo ""
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
  echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:"
  
  # PostgreSQL
  if docker exec matrix-postgres pg_isready -U matrix >/dev/null 2>&1; then
    echo "‚úÖ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç"
  else
    echo "‚ùå PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
  fi
  
  # Synapse API
  if curl -s -f http://localhost:8008/health >/dev/null 2>&1; then
    echo "‚úÖ Synapse API –¥–æ—Å—Ç—É–ø–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Synapse
    SYNAPSE_VERSION_API=$(curl -s http://localhost:8008/_matrix/client/versions 2>/dev/null | python3 -c "import sys, json; print(json.load(sys.stdin).get('server', {}).get('version', 'unknown'))" 2>/dev/null || echo "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
    echo "   –í–µ—Ä—Å–∏—è Synapse: $SYNAPSE_VERSION_API"
  else
    echo "‚ùå Synapse API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
  fi
  
  # Element Web
  if curl -s -f http://localhost:8080/ >/dev/null 2>&1; then
    echo "‚úÖ Element Web –¥–æ—Å—Ç—É–ø–µ–Ω"
  else
    echo "‚ùå Element Web –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
  fi
  
  # Synapse Admin
  if curl -s -f http://localhost:8081/ >/dev/null 2>&1; then
    echo "‚úÖ Synapse Admin –¥–æ—Å—Ç—É–ø–µ–Ω"
  else
    echo "‚ùå Synapse Admin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
  fi
  
  # Coturn
  if docker ps | grep -q "matrix-coturn.*Up"; then
    echo "‚úÖ Coturn –∑–∞–ø—É—â–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ Coturn
    if netstat -tulpn 2>/dev/null | grep -q ":3478"; then
      echo "   –ü–æ—Ä—Ç 3478 (TURN) —Å–ª—É—à–∞–µ—Ç—Å—è"
    else
      echo "   ‚ö†Ô∏è  –ü–æ—Ä—Ç 3478 –Ω–µ —Å–ª—É—à–∞–µ—Ç—Å—è"
    fi
  else
    echo "‚ùå Coturn –Ω–µ –∑–∞–ø—É—â–µ–Ω"
  fi
  
  echo ""
  echo "üåê –°–µ—Ç–µ–≤—ã–µ –ø–æ—Ä—Ç—ã:"
  netstat -tlnp 2>/dev/null | grep -E "(8008|8080|8081|8448|3478)" | head -10 || echo "   –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ—Ä—Ç—ã –Ω–µ —Å–ª—É—à–∞—é—Ç—Å—è"
  
  echo ""
  echo "üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:"
  if [ -d "/opt/synapse-data" ]; then
    DATA_SIZE=$(du -sh /opt/synapse-data 2>/dev/null | cut -f1)
    echo "   /opt/synapse-data: $DATA_SIZE"
  fi
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  if [ -f "/opt/synapse-data/homeserver.yaml" ]; then
    MATRIX_DOMAIN=$(grep "server_name:" /opt/synapse-data/homeserver.yaml | head -1 | sed 's/server_name: *"//' | sed 's/"//')
    echo ""
    echo "üîó –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
    echo "   Matrix –¥–æ–º–µ–Ω: $MATRIX_DOMAIN"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ federation
    FEDERATION_STATUS=$(grep -A 1 "federation_domain_whitelist:" /opt/synapse-data/homeserver.yaml | tail -1 | grep -q "^\s*$" && echo "–æ—Ç–∫–ª—é—á–µ–Ω–∞" || echo "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    echo "   –§–µ–¥–µ—Ä–∞—Ü–∏—è: $FEDERATION_STATUS"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    REGISTRATION_STATUS=$(grep "enable_registration:" /opt/synapse-data/homeserver.yaml | grep -q "true" && echo "–æ—Ç–∫—Ä—ã—Ç–∞" || echo "–∑–∞–∫—Ä—ã—Ç–∞")
    echo "   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: $REGISTRATION_STATUS"
  fi
  
  echo ""
  echo "üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:"
  
  # –ü–æ–¥—Å—á–µ—Ç —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  RUNNING_COUNT=$(docker ps --filter "name=matrix-" --format "{{.Names}}" | wc -l)
  TOTAL_COUNT=5  # postgres, synapse, element-web, synapse-admin, coturn
  
  if [ "$RUNNING_COUNT" -eq "$TOTAL_COUNT" ]; then
    echo "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç ($RUNNING_COUNT/$TOTAL_COUNT)"
  elif [ "$RUNNING_COUNT" -ge 3 ]; then
    echo "‚ö†Ô∏è  –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç ($RUNNING_COUNT/$TOTAL_COUNT)"
  else
    echo "‚ùå –ú–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏ ($RUNNING_COUNT/$TOTAL_COUNT)"
  fi
  
  if [ "$RUNNING_COUNT" -lt "$TOTAL_COUNT" ]; then
    echo ""
    echo "üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
    echo "   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã (–æ–ø—Ü–∏—è 3)"
    echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ (–æ–ø—Ü–∏—è 6)"
    echo "   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É (–æ–ø—Ü–∏—è 9)"
  fi
}

fix_element_domain_config() {
  echo "=== –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ–º–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ Element Web ==="
  echo ""
  
  ELEMENT_DOMAIN=""
  if [ -f "/etc/caddy/Caddyfile" ]; then
    ELEMENT_DOMAIN=$(grep -A 5 "Element Web Client" /etc/caddy/Caddyfile | grep "^[a-zA-Z]" | head -1 | cut -d' ' -f1)
  fi
  
  if [ -z "$ELEMENT_DOMAIN" ]; then
    ELEMENT_DOMAIN=$(docker logs matrix-element-web 2>&1 | grep -o 'config\.[a-zA-Z0-9.-]*\.json' | head -1 | sed 's/config\.//' | sed 's/\.json//')
    if [ -n "$ELEMENT_DOMAIN" ]; then
      echo "üìã –î–æ–º–µ–Ω Element –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∏–∑ –ª–æ–≥–æ–≤: $ELEMENT_DOMAIN"
    else
      read -p "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω Element Web (–Ω–∞–ø—Ä–∏–º–µ—Ä, app.bla-bla.space): " ELEMENT_DOMAIN
    fi
  else
    echo "üìã –î–æ–º–µ–Ω Element –Ω–∞–π–¥–µ–Ω –≤ Caddyfile: $ELEMENT_DOMAIN"
  fi
  
  if [ -z "$ELEMENT_DOMAIN" ]; then
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ–º–µ–Ω Element Web"
    return 1
  fi
  
  echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–æ–º–µ–Ω–∞: $ELEMENT_DOMAIN"
  
  MATRIX_DOMAIN=""
  if [ -f "/opt/synapse-data/homeserver.yaml" ]; then
    MATRIX_DOMAIN=$(grep "server_name:" /opt/synapse-data/homeserver.yaml | head -1 | sed 's/server_name: *"//' | sed 's/"//')
  fi
  
  if [ -z "$MATRIX_DOMAIN" ]; then
    read -p "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω Matrix —Å–µ—Ä–≤–µ—Ä–∞: " MATRIX_DOMAIN
  fi
  
  echo "Matrix –¥–æ–º–µ–Ω: $MATRIX_DOMAIN"
  
  echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Element Web –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
  docker stop matrix-element-web 2>/dev/null || true
  
  echo "–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Element Web..."
  
  mkdir -p /opt/element-web
  
  cat > /opt/element-web/config.json <<EOL
{
    "default_server_config": {
        "m.homeserver": {
            "base_url": "https://$MATRIX_DOMAIN",
            "server_name": "$MATRIX_DOMAIN"
        },
        "m.identity_server": {
            "base_url": "https://vector.im"
        }
    },
    "brand": "Element",
    "integrations_ui_url": "https://scalar.vector.im/",
    "integrations_rest_url": "https://scalar.vector.im/api",
    "integrations_widgets_urls": [
        "https://scalar.vector.im/_matrix/integrations/v1",
        "https://scalar.vector.im/api",
        "https://scalar-staging.vector.im/_matrix/integrations/v1",
        "https://scalar-stAGING.vector.im/api"
    ],
    "hosting_signup_link": "https://element.io/matrix-services?utm_source=element-web&utm_medium=web",
    "bug_report_endpoint_url": "https://element.io/bugreports/submit",
    "uisi_autorageshake_app": "element-auto-uisi",
    "showLabsSettings": true,
    "piwik": false,
    "roomDirectory": {
        "servers": ["$MATRIX_DOMAIN"]
    },
    "enable_presence_by_hs_url": {
        "https://matrix.org": false,
        "https://matrix-client.matrix.org": false
    },
    "terms_and_conditions_links": [
        {
            "text": "Privacy Policy",
            "url": "https://$MATRIX_DOMAIN/privacy"
        },
        {
            "text": "Terms of Service", 
            "url": "https://$MATRIX_DOMAIN/terms"
        }
    ],
    "welcomeUserId": "@admin:$MATRIX_DOMAIN",
    "default_federate": false,
    "default_theme": "dark",
    "features": {
        "feature_new_room_decoration_ui": true,
        "feature_pinning": "labs",
        "feature_custom_status": "labs",
        "feature_custom_tags": "labs",
        "feature_state_counters": "labs",
        "feature_many_profile_picture_sizes": true,
        "feature_mjolnir": "labs",
        "feature_custom_themes": "labs",
        "feature_spaces": true,
        "feature_spaces.all_rooms": true,
        "feature_spaces.space_member_dms": true,
        "feature_voice_messages": true,
        "feature_location_share_live": true,
        "feature_polls": true,
        "feature_location_share": true,
        "feature_thread": true,
        "feature_latex_maths": true,
        "feature_element_call_video_rooms": "labs",
        "feature_group_calls": "labs",
        "feature_disable_call_per_sender_encryption": "labs",
        "feature_allow_screen_share_only_mode": "labs",
        "feature_location_share_pin_drop": "labs",
        "feature_video_rooms": "labs",
        "feature_element_call": "labs",
        "feature_new_device_manager": true,
        "feature_bulk_redaction": "labs",
        "feature_roomlist_preview_reactions_dms": true,
        "feature_roomlist_preview_reactions_all": true
    },
    "element_call": {
        "url": "https://call.element.io",
        "participant_limit": 8,
        "brand": "Element Call"
    },
    "map_style_url": "https://api.maptiler.com/maps/streets/style.json?key=fU3vlMsMn4Jb6dnEIFsx"
}
EOL
  
  cp /opt/element-web/config.json "/opt/element-web/config.$ELEMENT_DOMAIN.json"
  echo "‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–æ–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: config.$ELEMENT_DOMAIN.json"
  
  if [ -f "/opt/synapse-config/docker-compose.yml" ]; then
    echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    cp /opt/synapse-config/docker-compose.yml /opt/synapse-config/docker-compose.yml.backup.$(date +%s)
    
    if ! grep -q "config.$ELEMENT_DOMAIN.json" /opt/synapse-config/docker-compose.yml; then
      echo "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
      
      python3 << EOF
import yaml
import os

compose_file = "/opt/synapse-config/docker-compose.yml"

try:
    with open(compose_file, 'r') as f:
        content = f.read()
    
    # –ó–∞–º–µ–Ω—è–µ–º volumes –≤ —Å–µ–∫—Ü–∏–∏ element-web
    lines = content.split('\n')
    new_lines = []
    in_element_web = False
    in_volumes = False
    volumes_added = False
    
    for line in lines:
        if 'element-web:' in line:
            in_element_web = True
            new_lines.append(line)
        elif in_element_web and line.strip().startswith('volumes:'):
            in_volumes = True
            new_lines.append(line)
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            new_lines.append('      - /opt/element-web/config.json:/app/config.json:ro')
            new_lines.append('      - /opt/element-web/config.$ELEMENT_DOMAIN.json:/app/config.$ELEMENT_DOMAIN.json:ro')
            volumes_added = True
        elif in_element_web and in_volumes and line.strip().startswith('- ') and 'config.json' in line:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ config.json
            continue
        elif in_element_web and not line.startswith('  ') and line.strip():
            # –í—ã—à–ª–∏ –∏–∑ —Å–µ–∫—Ü–∏–∏ element-web
            in_element_web = False
            in_volumes = False
            new_lines.append(line)
        else:
            new_lines.append(line)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(compose_file, 'w') as f:
        f.write('\n'.join(new_lines))
    
    print("‚úÖ Docker Compose –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Python")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ Python –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º sed
    os.system('sed -i "/element-web:/,/stop_grace_period: 15s/ { /- \/opt\/element-web\/config\.json/d; /volumes:/a\\      - /opt/element-web/config.json:/app/config.json:ro\\n      - /opt/element-web/config.$ELEMENT_DOMAIN.json:/app/config.$ELEMENT_DOMAIN.json:ro }" /opt/synapse-config/docker-compose.yml')
    print("‚úÖ Docker Compose –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ sed")
EOF
    else
      echo "‚úÖ –î–æ–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ Docker Compose"
    fi
    
    echo "‚úÖ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
  fi
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞..."
  chown root:root /opt/element-web/config*.json
  chmod 644 /opt/element-web/config*.json
  
  # –ó–∞–ø—É—Å–∫ Element Web –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  echo "–ó–∞–ø—É—Å–∫ Element Web –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
  cd /opt/synapse-config 2>/dev/null
  if [ -f "docker-compose.yml" ]; then
    docker compose up -d element-web
    echo "‚úÖ Element Web –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞
    echo "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Element Web..."
    for i in {1..12}; do
      if curl -s http://localhost:8080/ >/dev/null 2>&1; then
        echo "‚úÖ Element Web –≥–æ—Ç–æ–≤!"
        break
      elif [ $i -eq 12 ]; then
        echo "‚ö†Ô∏è  Element Web –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs matrix-element-web"
      else
        echo "   –û–∂–∏–¥–∞–Ω–∏–µ... ($i/12)"
        sleep 5
      fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
    echo ""
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π:"
    
    if curl -s "http://localhost:8080/config.json" >/dev/null 2>&1; then
      echo "‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞: /config.json"
    else
      echo "‚ùå –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    fi
    
    if curl -s "http://localhost:8080/config.$ELEMENT_DOMAIN.json" >/dev/null 2>&1; then
      echo "‚úÖ –î–æ–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞: /config.$ELEMENT_DOMAIN.json"
    else
      echo "‚ùå –î–æ–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
      echo "üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:"
      echo "   –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ..."
      docker exec matrix-element-web ls -la /app/config*.json 2>/dev/null || echo "   –§–∞–π–ª—ã –Ω–µ –≤–∏–¥–Ω—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"
      echo "   –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Ö–æ—Å—Ç–µ..."
      ls -la /opt/element-web/config*.json 2>/dev/null || echo "   –§–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞ —Ö–æ—Å—Ç–µ"
    fi
    
  else
    echo "‚ö†Ô∏è  docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤—Ä—É—á–Ω—É—é"
  fi
  
  echo ""
  echo "================================================================="
  echo "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Element Web –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
  echo "================================================================="
  echo ""
  echo "üìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:"
  echo "   - –°–æ–∑–¥–∞–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: /opt/element-web/config.json"
  echo "   - –°–æ–∑–¥–∞–Ω–∞ –¥–æ–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: /opt/element-web/config.$ELEMENT_DOMAIN.json"
  echo "   - –û–±–Ω–æ–≤–ª–µ–Ω–∞ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
  echo "   - –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω Element Web –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
  echo ""
  echo "üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:"
  echo "   - http://localhost:8080/config.json"
  echo "   - http://localhost:8080/config.$ELEMENT_DOMAIN.json"
  echo "   - https://$ELEMENT_DOMAIN (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω reverse proxy)"
  echo ""
  echo "üîß –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è:"
  echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs matrix-element-web"
  echo "   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ reverse proxy –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
  echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: ls -la /opt/element-web/"
  echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Docker Compose: cat /opt/synapse-config/docker-compose.yml | grep -A 15 element-web"
  echo "================================================================="
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)
create_admin_user() {
  echo "=== –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Matrix ==="
  echo ""
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ Synapse –∑–∞–ø—É—â–µ–Ω
  if ! curl -s http://localhost:8008/health >/dev/null 2>&1; then
    echo "‚ùå Synapse –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ Matrix —Å–µ—Ä–≤–∏—Å—ã."
    echo "   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é 3 (–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã)"
    return 1
  fi
  
  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  MATRIX_DOMAIN=""
  if [ -f "/opt/synapse-data/homeserver.yaml" ]; then
    MATRIX_DOMAIN=$(grep "server_name:" /opt/synapse-data/homeserver.yaml | head -1 | sed 's/server_name: *"//' | sed 's/"//')
  fi
  
  if [ -z "$MATRIX_DOMAIN" ]; then
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ–º–µ–Ω Matrix —Å–µ—Ä–≤–µ—Ä–∞"
    read -p "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω Matrix —Å–µ—Ä–≤–µ—Ä–∞: " MATRIX_DOMAIN
  fi
  
  echo "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
  echo "   Matrix –¥–æ–º–µ–Ω: $MATRIX_DOMAIN"
  echo "   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∫–∞–∫: @username:$MATRIX_DOMAIN"
  echo ""
  
  # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, - –∏ _): " username
  
  # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if [[ ! "$username" =~ ^[a-zA-Z0-9._=-]+$ ]]; then
    echo "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫–∏, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è."
    return 1
  fi
  
  read -p "–°–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º? (Y/n): " make_admin
  
  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  admin_flag=""
  admin_text=""
  if [[ $make_admin != [nN] ]]; then
    admin_flag="--admin"
    admin_text=" (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)"
  fi
  
  echo ""
  echo "üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @$username:$MATRIX_DOMAIN$admin_text..."
  echo ""
  
  # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Docker
  if docker exec -it matrix-synapse register_new_matrix_user \
    -c /data/homeserver.yaml \
    -u "$username" \
    $admin_flag \
    http://localhost:8008; then
    
    echo ""
    echo "================================================================="
    echo "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"
    echo "================================================================="
    echo ""
    echo "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:"
    echo "   –ü–æ–ª–Ω—ã–π ID: @$username:$MATRIX_DOMAIN"
    echo "   –î–æ–º–µ–Ω: $MATRIX_DOMAIN"
    echo "   –¢–∏–ø: $([ -n "$admin_flag" ] && echo "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" || echo "–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")"
    echo ""
    echo "üåê –î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å–∞–º:"
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
    if [ -f "/opt/synapse-data/homeserver.yaml" ]; then
      echo "   Matrix API: https://$MATRIX_DOMAIN"
    fi
    
    if [ -f "/etc/caddy/Caddyfile" ]; then
      ELEMENT_DOMAIN=$(grep -A 5 "Element Web Client" /etc/caddy/Caddyfile | grep "^[a-zA-Z]" | head -1 | cut -d' ' -f1)
      ADMIN_DOMAIN=$(grep -A 5 "Synapse Admin Interface" /etc/caddy/Caddyfile | grep "^[a-zA-Z]" | head -1 | cut -d' ' -f1)
      
      if [ -n "$ELEMENT_DOMAIN" ]; then
        echo "   Element Web: https://$ELEMENT_DOMAIN"
      fi
      
      if [ -n "$ADMIN_DOMAIN" ] && [ -n "$admin_flag" ]; then
        echo "   Synapse Admin: https://$ADMIN_DOMAIN"
      fi
    else
      echo "   Element Web: http://localhost:8080 (–ª–æ–∫–∞–ª—å–Ω–æ)"
      if [ -n "$admin_flag" ]; then
        echo "   Synapse Admin: http://localhost:8081 (–ª–æ–∫–∞–ª—å–Ω–æ)"
      fi
    fi
    
    echo ""
    echo "üì± –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç—ã:"
    echo "   Homeserver: https://$MATRIX_DOMAIN"
    echo "   –õ–æ–≥–∏–Ω: @$username:$MATRIX_DOMAIN"
    echo "   –ü–∞—Ä–æ–ª—å: [–∫–æ—Ç–æ—Ä—ã–π –≤—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏]"
    echo ""
    
    if [ -n "$admin_flag" ]; then
      echo "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:"
      echo "   - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —á–µ—Ä–µ–∑ Synapse Admin"
      echo "   - –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–∏"
      echo "   - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–∏—Ç–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞"
      echo "   - –î–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É"
      echo ""
    fi
    
    echo "‚ÑπÔ∏è  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
    echo "   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å"
    echo "   - –í–∫–ª—é—á–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ –∫–ª–∏–µ–Ω—Ç–µ"
    echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
    echo "================================================================="
    
    return 0
  else
    echo ""
    echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    echo ""
    echo "üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:"
    echo "   - Synapse –Ω–µ –≥–æ—Ç–æ–≤ (–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É)"
    echo "   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    echo "   - –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"
    echo "   - –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
    echo ""
    echo "üîç –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:"
    echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å (–æ–ø—Ü–∏—è 2)"
    echo "   - –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ Synapse (–æ–ø—Ü–∏—è 6 ‚Üí 1)"
    echo "   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É (–æ–ø—Ü–∏—è 9)"
    echo ""
    return 1
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Synapse
create_synapse_config() {
  local matrix_domain=$1
  local db_password=$2
  local registration_shared_secret=$3
  local turn_shared_secret=$4
  local admin_user=$5
  
  echo "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Synapse..."
  
  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á –ø–æ–¥–ø–∏—Å–∏, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å
  EXISTING_SIGNING_KEY=""
  if [ -f "/opt/synapse-data/signing.key" ]; then
    EXISTING_SIGNING_KEY=$(cat /opt/synapse-data/signing.key)
    echo "‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á –ø–æ–¥–ø–∏—Å–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ"
  fi
  
  # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
  cat > /opt/synapse-data/homeserver.yaml <<EOL
# Matrix Synapse Configuration v6.0
# TLS –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –Ω–∞ Caddy reverse proxy, Synapse —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ HTTP

server_name: "$matrix_domain"
public_baseurl: "https://$matrix_domain"
pid_file: "/data/homeserver.pid"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—Å—Ç–µ–Ω–µ—Ä–æ–≤
listeners:
  - port: 8008
    tls: false
    type: http
    x_forwarded: true
    bind_addresses: ['0.0.0.0']
    resources:
      - names: [client, federation]
        compress: false
    # Healthcheck endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –≤—Å–µ—Ö HTTP –ª–∏—Å—Ç–µ–Ω–µ—Ä–∞—Ö
    
  - port: 8448
    tls: false  
    type: http
    x_forwarded: true
    bind_addresses: ['0.0.0.0']
    resources:
      - names: [federation]
        compress: false

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app_service_config_files: []
track_appservice_user_ips: true

# –°–µ–∫—Ä–µ—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
macaroon_secret_key: "$(openssl rand -hex 32)"
form_secret: "$(openssl rand -hex 32)"
signing_key_path: "/data/signing.key"

# Well-known endpoints (–æ—Ç–¥–∞—ë—Ç Caddy)
serve_server_wellknown: false

# TURN —Å–µ—Ä–≤–µ—Ä –¥–ª—è VoIP
turn_uris: 
  - "turn:$matrix_domain:3478?transport=udp"
  - "turn:$matrix_domain:3478?transport=tcp"
turn_shared_secret: "$turn_shared_secret"
turn_user_lifetime: "1h"
turn_allow_guests: true

# –ú–µ–¥–∏–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
media_store_path: "/data/media_store"
max_upload_size: "100M"
max_image_pixels: "32M"
dynamic_thumbnails: false
url_preview_enabled: false

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
database:
  name: psycopg2
  txn_limit: 10000
  args:
    user: matrix
    password: "$db_password"
    database: matrix
    host: postgres
    port: 5432
    cp_min: 5
    cp_max: 10
    keepalives_idle: 10
    keepalives_interval: 10
    keepalives_count: 3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª–µ–π
password_config:
  enabled: true
  policy:
    minimum_length: 8
    require_digit: true
    require_symbol: true
    require_lowercase: true
    require_uppercase: true

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
enable_registration: false
registration_requires_token: true
registration_shared_secret: "$registration_shared_secret"

# –§–µ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
federation_domain_whitelist: []
suppress_key_server_warning: true

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
admin_users:
  - "@$admin_user:$matrix_domain"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
event_cache_size: "10K"
caches:
  global_factor: 0.5
  per_cache_factors:
    get_users_who_share_room_with_user: 2.0

# –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
presence:
  enabled: true
  include_offline_users_on_sync: false

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
rc_message:
  per_second: 0.2
  burst_count: 10.0

rc_registration:
  per_second: 0.17
  burst_count: 3.0

rc_login:
  address:
    per_second: 0.003
    burst_count: 5.0
  account:
    per_second: 0.003
    burst_count: 5.0
  failed_attempts:
    per_second: 0.17
    burst_count: 3.0

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç
encryption_enabled_by_default_for_room_type: "invite"
enable_room_list_search: true

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_directory:
  enabled: true
  search_all_users: false
  prefer_local_users: true

# –ú–µ—Ç—Ä–∏–∫–∏ (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
enable_metrics: false
report_stats: false

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log_config: "/data/log_config.yaml"
EOL

  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á –ø–æ–¥–ø–∏—Å–∏ –µ—Å–ª–∏ –æ–Ω –±—ã–ª
  if [ -n "$EXISTING_SIGNING_KEY" ]; then
    echo "$EXISTING_SIGNING_KEY" > /opt/synapse-data/signing.key
    echo "‚úÖ –ö–ª—é—á –ø–æ–¥–ø–∏—Å–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
  fi

  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  cat > /opt/synapse-data/log_config.yaml <<EOL
version: 1

formatters:
    precise:
        format: '%(asctime)s - %(name)s - %(lineno)d - %(levelname)s - %(request)s - %(message)s'

handlers:
    console:
        class: logging.StreamHandler
        formatter: precise
        stream: ext://sys.stdout

loggers:
    synapse.storage.SQL:
        level: INFO

root:
    level: INFO
    handlers: [console]

disable_existing_loggers: false
EOL

  echo "‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Synapse —Å–æ–∑–¥–∞–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–ª—é—á–æ–º –ø–æ–¥–ø–∏—Å–∏
fix_signing_key() {
  echo "=== –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –ø–æ–¥–ø–∏—Å–∏ Synapse ==="
  
  if [ ! -d "/opt/synapse-data" ]; then
    echo "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è /opt/synapse-data –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    return 1
  fi
  
  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Synapse
  echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Synapse –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
  docker stop matrix-synapse 2>/dev/null || true
  
  # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
  if [ -f "/opt/synapse-data/signing.key" ]; then
    echo "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –ø–æ–¥–ø–∏—Å–∏..."
    rm -f /opt/synapse-data/signing.key
  fi
  
  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  MATRIX_DOMAIN=""
  if [ -f "/opt/synapse-data/homeserver.yaml" ]; then
    MATRIX_DOMAIN=$(grep "server_name:" /opt/synapse-data/homeserver.yaml | head -1 | sed 's/server_name: *"//' | sed 's/"//')
  fi
  
  if [ -z "$MATRIX_DOMAIN" ]; then
    read -p "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω Matrix —Å–µ—Ä–≤–µ—Ä–∞: " MATRIX_DOMAIN
  fi
  
  echo "–î–æ–º–µ–Ω Matrix: $MATRIX_DOMAIN"
  
  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ Synapse
  echo "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ –ø–æ–¥–ø–∏—Å–∏ —á–µ—Ä–µ–∑ Synapse..."
  docker run --rm \
    --mount type=bind,source=/opt/synapse-data,target=/data \
    -e SYNAPSE_SERVER_NAME="$MATRIX_DOMAIN" \
    -e SYNAPSE_REPORT_STATS=no \
    matrixdotorg/synapse:latest generate
    
  if [ $? -eq 0 ]; then
    echo "‚úÖ –ù–æ–≤—ã–π –∫–ª—é—á –ø–æ–¥–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    chown -R 991:991 /opt/synapse-data
    
    # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–µ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ
    echo "–ó–∞–ø—É—Å–∫ Synapse –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    cd /opt/synapse-config 2>/dev/null
    if [ -f "docker-compose.yml" ]; then
      docker compose up -d synapse
      echo "‚úÖ Synapse –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
      
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞
      echo "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Synapse..."
      for i in {1..12}; do
        if curl -s http://localhost:8008/health >/dev/null 2>&1; then
          echo "‚úÖ Synapse –≥–æ—Ç–æ–≤!"
          break
        elif [ $i -eq 12 ]; then
          echo "‚ö†Ô∏è  Synapse –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs matrix-synapse"
        else
          echo "   –û–∂–∏–¥–∞–Ω–∏–µ... ($i/12)"
          sleep 5
        fi
      done
    else
      echo "‚ö†Ô∏è  docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤—Ä—É—á–Ω—É—é"
    fi
  else
    echo "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞"
    return 1
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
create_docker_compose() {
  local matrix_domain=$1
  local db_password=$2
  local bind_address=$3
  
  echo "–°–æ–∑–¥–∞–Ω–∏–µ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
  
  mkdir -p /opt/synapse-config
  
  cat > /opt/synapse-config/docker-compose.yml <<EOL
services:
  # PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
  postgres:
    image: postgres:15-alpine
    container_name: matrix-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=matrix
      - POSTGRES_PASSWORD=$db_password
      - POSTGRES_DB=matrix
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - matrix-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U matrix"]
      interval: 10s
      timeout: 5s
      retries: 5
    stop_grace_period: 30s

  # Matrix Synapse —Å–µ—Ä–≤–µ—Ä
  synapse:
    image: matrixdotorg/synapse:$SYNAPSE_VERSION
    container_name: matrix-synapse
    restart: unless-stopped
    volumes:
      - /opt/synapse-data:/data
    environment:
      - SYNAPSE_SERVER_NAME=$matrix_domain
      - SYNAPSE_REPORT_STATS=no
      - UID=991
      - GID=991
    ports:
      - "$bind_address:8008:8008"
      - "$bind_address:8448:8448"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - matrix-network
    healthcheck:
      test: ["CMD", "curl", "-fSs", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    stop_grace_period: 30s

  # Element Web –∫–ª–∏–µ–Ω—Ç
  element-web:
    image: vectorim/element-web:$ELEMENT_VERSION
    container_name: matrix-element-web
    restart: unless-stopped
    volumes:
      - /opt/element-web/config.json:/app/config.json:ro
    ports:
      - "$bind_address:8080:80"
    networks:
      - matrix-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    stop_grace_period: 15s

  # Synapse Admin –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  synapse-admin:
    image: awesometechnologies/synapse-admin:$SYNAPSE_ADMIN_VERSION
    container_name: matrix-synapse-admin
    restart: unless-stopped
    volumes:
      - /opt/synapse-admin/config.json:/app/config.json:ro
    ports:
      - "$bind_address:8081:80"
    networks:
      - matrix-network
    environment:
      - REACT_APP_SERVER_URL=https://$matrix_domain
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    stop_grace_period: 15s

  # Coturn TURN —Å–µ—Ä–≤–µ—Ä (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
  coturn:
    image: coturn/coturn:latest
    container_name: matrix-coturn
    restart: unless-stopped
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º host —Å–µ—Ç—å –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è Docker Coturn)
    network_mode: host
    volumes:
      - /opt/coturn/turnserver.conf:/etc/coturn/turnserver.conf:ro
      - coturn-data:/var/lib/coturn
    environment:
      # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP
      - DETECT_EXTERNAL_IP=yes
      - DETECT_RELAY_IP=yes
    command: ["-c", "/etc/coturn/turnserver.conf", "--log-file=stdout", "-v"]
    stop_grace_period: 10s

volumes:
  postgres-data:
    driver: local
  coturn-data:
    driver: local

networks:
  matrix-network:
    driver: bridge
EOL

  echo "‚úÖ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ (—Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º Coturn)"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Element Web
create_element_config() {
  local matrix_domain=$1
  local admin_user=$2
  
  echo "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Element Web..."
  
  mkdir -p /opt/element-web
  
  cat > /opt/element-web/config.json <<EOL
{
    "default_server_config": {
        "m.homeserver": {
            "base_url": "https://$matrix_domain",
            "server_name": "$matrix_domain"
        },
        "m.identity_server": {
            "base_url": "https://vector.im"
        }
    },
    "brand": "Element",
    "integrations_ui_url": "https://scalar.vector.im/",
    "integrations_rest_url": "https://scalar.vector.im/api",
    "integrations_widgets_urls": [
        "https://scalar.vector.im/_matrix/integrations/v1",
        "https://scalar.vector.im/api",
        "https://scalar-staging.vector.im/_matrix/integrations/v1",
        "https://scalar-stAGING.vector.im/api"
    ],
    "hosting_signup_link": "https://element.io/matrix-services?utm_source=element-web&utm_medium=web",
    "bug_report_endpoint_url": "https://element.io/bugreports/submit",
    "uisi_autorageshake_app": "element-auto-uisi",
    "showLabsSettings": true,
    "piwik": false,
    "roomDirectory": {
        "servers": ["$matrix_domain"]
    },
    "enable_presence_by_hs_url": {
        "https://matrix.org": false,
        "https://matrix-client.matrix.org": false
    },
    "terms_and_conditions_links": [
        {
            "text": "Privacy Policy",
            "url": "https://$matrix_domain/privacy"
        },
        {
            "text": "Terms of Service", 
            "url": "https://$matrix_domain/terms"
        }
    ],
    "welcomeUserId": "@$admin_user:$matrix_domain",
    "default_federate": false,
    "default_theme": "dark",
    "features": {
        "feature_new_room_decoration_ui": true,
        "feature_pinning": "labs",
        "feature_custom_status": "labs",
        "feature_custom_tags": "labs",
        "feature_state_counters": "labs",
        "feature_many_profile_picture_sizes": true,
        "feature_mjolnir": "labs",
        "feature_custom_themes": "labs",
        "feature_spaces": true,
        "feature_spaces.all_rooms": true,
        "feature_spaces.space_member_dms": true,
        "feature_voice_messages": true,
        "feature_location_share_live": true,
        "feature_polls": true,
        "feature_location_share": true,
        "feature_thread": true,
        "feature_latex_maths": true,
        "feature_element_call_video_rooms": "labs",
        "feature_group_calls": "labs",
        "feature_disable_call_per_sender_encryption": "labs",
        "feature_allow_screen_share_only_mode": "labs",
        "feature_location_share_pin_drop": "labs",
        "feature_video_rooms": "labs",
        "feature_element_call": "labs",
        "feature_new_device_manager": true,
        "feature_bulk_redaction": "labs",
        "feature_roomlist_preview_reactions_dms": true,
        "feature_roomlist_preview_reactions_all": true
    },
    "element_call": {
        "url": "https://call.element.io",
        "participant_limit": 8,
        "brand": "Element Call"
    },
    "map_style_url": "https://api.maptiler.com/maps/streets/style.json?key=fU3vlMsMn4Jb6dnEIFsx"
}
EOL

  echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Element Web —Å–æ–∑–¥–∞–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Synapse Admin
create_synapse_admin_config() {
  local matrix_domain=$1
  
  echo "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Synapse Admin..."
  
  mkdir -p /opt/synapse-admin
  
  cat > /opt/synapse-admin/config.json <<EOL
{
  "restrictBaseUrl": "https://$matrix_domain",
  "anotherRestrictedKey": "restricting",
  "locale": "en"
}
EOL

  echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Synapse Admin —Å–æ–∑–¥–∞–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Coturn (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
create_coturn_config() {
  local matrix_domain=$1
  local turn_secret=$2
  local public_ip=$3
  local local_ip=$4
  
  echo "–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Coturn..."
  
  mkdir -p /opt/coturn
  
  cat > /opt/coturn/turnserver.conf <<EOL
# Coturn TURN Server Configuration –¥–ª—è Matrix (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ—Ä—Ç—ã
listening-port=3478
tls-listening-port=5349

# –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
listening-ip=0.0.0.0

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤ –¥–ª—è Docker
min-port=49160
max-port=49200

# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
use-auth-secret
static-auth-secret=$turn_secret
realm=$matrix_domain

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤—ã–≤–æ–¥–∏–º –≤ stdout –¥–ª—è Docker)
no-stdout-log
syslog

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
no-multicast-peers
no-cli
no-loopback-peers
no-tcp-relay

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
user-quota=12
total-quota=1200

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ IP –¥–∏–∞–ø–∞–∑–æ–Ω—ã
denied-peer-ip=10.0.0.0-10.255.255.255
denied-peer-ip=192.168.0.0-192.168.255.255
denied-peer-ip=172.16.0.0-172.31.255.255
denied-peer-ip=127.0.0.0-127.255.255.255
denied-peer-ip=169.254.0.0-169.254.255.255
denied-peer-ip=224.0.0.0-255.255.255.255

# –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ IP
# (Docker –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç external IP —á–µ—Ä–µ–∑ DETECT_EXTERNAL_IP)

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Docker –∏ Matrix
no-tls
no-dtls
simple-log
new-log-timestamp

# –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
mobility
no-stale-nonce

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
max-allocate-lifetime=3600
channel-lifetime=600

# PID —Ñ–∞–π–ª (–≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
pidfile=/var/run/turnserver.pid

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ü–µ—Å—Å–∞
proc-user=turnserver
proc-group=turnserver
EOL

  echo "‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Coturn —Å–æ–∑–¥–∞–Ω–∞"
  echo "   - –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤: 49160-49200 (40 –ø–æ—Ä—Ç–æ–≤)"
  echo "   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP"
  echo "   - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Docker host —Å–µ—Ç–∏"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ Caddyfile
create_enhanced_caddyfile() {
  local matrix_domain=$1
  local element_domain=$2
  local admin_domain=$3
  local bind_address=$4
  
  echo "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ Caddyfile..."
  
  cat > /etc/caddy/Caddyfile <<EOL
# Matrix Synapse Server
$matrix_domain {
    # Well-known endpoints –¥–ª—è —Ñ–µ–¥–µ—Ä–∞—Ü–∏–∏ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
    handle_path /.well-known/matrix/server {
        respond \`{"m.server": "$matrix_domain:8448"}\` 200 {
            header Content-Type application/json
            header Access-Control-Allow-Origin *
            header Cache-Control "public, max-age=3600"
        }
    }
    
    handle_path /.well-known/matrix/client {
        respond \`{
            "m.homeserver": {
                "base_url": "https://$matrix_domain"
            },
            "m.identity_server": {
                "base_url": "https://vector.im"
            },
            "org.matrix.msc3575.proxy": {
                "url": "https://$matrix_domain"
            }
        }\` 200 {
            header Content-Type application/json
            header Access-Control-Allow-Origin *
            header Cache-Control "public, max-age=3600"
        }
    }

    # –û—Å–Ω–æ–≤–Ω—ã–µ Matrix API endpoints
    reverse_proxy /_matrix/* $bind_address:8008 {
        header_up X-Forwarded-Proto {scheme}
        header_up X-Forwarded-For {remote_host}
        header_up Host {host}
    }
    
    reverse_proxy /_synapse/client/* $bind_address:8008 {
        header_up X-Forwarded-Proto {scheme}
        header_up X-Forwarded-For {remote_host}
        header_up Host {host}
    }

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
    header {
        # Security headers
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options "nosniff"
        X-Frame-Options "DENY"
        X-XSS-Protection "1; mode=block"
        Referrer-Policy "strict-origin-when-cross-origin"
        
        # Remove server info
        -Server
    }
}

# Matrix Federation (–æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç)
$matrix_domain:8448 {
    reverse_proxy $bind_address:8448 {
        header_up X-Forwarded-Proto {scheme}
        header_up X-Forwarded-For {remote_host}
        header_up Host {host}
    }
    
    header {
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        -Server
    }
}

# Element Web Client
$element_domain {
    reverse_proxy $bind_address:8080 {
        header_up X-Forwarded-Proto {scheme}
        header_up X-Forwarded-For {remote_host}
        header_up Host {host}
    }
    
    header {
        # Enhanced security –¥–ª—è Element Web
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options "nosniff"
        X-Frame-Options "DENY"
        X-XSS-Protection "1; mode=block"
        Referrer-Policy "strict-origin-when-cross-origin"
        
        # Content Security Policy –¥–ª—è Element
        Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; media-src 'self' blob:; font-src 'self'; connect-src 'self' https: wss:; frame-src 'self' https:; worker-src 'self' blob:;"
        
        # Permissions Policy
        Permissions-Policy "camera=(), microphone=(), geolocation=(), payment=(), usb=()"
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏–∫–∏
        Cache-Control "public, max-age=31536000" {
            path_regexp \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$
        }
        
        -Server
    }
}

# Synapse Admin Interface
$admin_domain {
    reverse_proxy $bind_address:8081 {
        header_up X-Forwarded-Proto {scheme}
        header_up X-Forwarded-For {remote_host}
        header_up Host {host}
    }
    
    header {
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options "nosniff"
        X-Frame-Options "DENY"
        X-XSS-Protection "1; mode=block"
        Referrer-Policy "strict-origin-when-cross-origin"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
        Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self' https:;"
        
        -Server
    }
}
EOL

  echo "‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Caddyfile —Å–æ–∑–¥–∞–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Caddy
install_caddy() {
  echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Caddy..."
  
  if [ "$SERVER_TYPE" != "hosting" ]; then
    echo "‚ö†Ô∏è  Caddy —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è hosting VPS"
    echo "–î–ª—è Proxmox –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Caddy –Ω–∞ —Ö–æ—Å—Ç-–º–∞—à–∏–Ω–µ"
    return 0
  fi
  
  systemctl stop nginx >/dev/null 2>&1 || true
  systemctl stop apache2 >/dev/null 2>&1 || true

  apt install -y debian-keyring debian-archive-keyring apt-transport-https curl
  curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
  curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | tee /etc/apt/sources.list.d/caddy-stable.list
  apt update
  apt install -y caddy

  create_enhanced_caddyfile "$MATRIX_DOMAIN" "$ELEMENT_DOMAIN" "$ADMIN_DOMAIN" "$BIND_ADDRESS"

  systemctl enable caddy
  systemctl start caddy
  
  if systemctl is-active --quiet caddy; then
    echo "‚úÖ Caddy —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω"
  else
    echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Caddy"
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
full_installation() {
  echo "=== Matrix Setup & Repair Tool v6.0 - Enhanced Installation ==="
  echo ""
  
  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  fix_system_time
  
  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
  echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
  apt update && apt upgrade -y
  apt install -y curl wget openssl pwgen ufw fail2ban
  
  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–µ—Ä–≤–µ—Ä–∞
  detect_server_type
  
  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
  if ! install_docker; then
    echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: Docker –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
    exit 1
  fi
  
  # –ó–∞–ø—Ä–æ—Å –¥–æ–º–µ–Ω–æ–≤ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  echo ""
  echo "=== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–º–µ–Ω–æ–≤ ==="
  read -p "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω Matrix —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, matrix.example.com): " MATRIX_DOMAIN
  read -p "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω Element Web (–Ω–∞–ø—Ä–∏–º–µ—Ä, element.example.com): " ELEMENT_DOMAIN  
  read -p "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω Synapse Admin (–Ω–∞–ø—Ä–∏–º–µ—Ä, admin.example.com): " ADMIN_DOMAIN
  read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: admin): " input_admin
  ADMIN_USER=${input_admin:-admin}
  
  echo ""
  echo "=== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ==="
  while true; do
    read -s -p "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL: " DB_PASSWORD
    echo ""
    read -s -p "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: " DB_PASSWORD_CONFIRM
    echo ""
    
    if [ "$DB_PASSWORD" = "$DB_PASSWORD_CONFIRM" ]; then
      if [ ${#DB_PASSWORD} -lt 8 ]; then
        echo "‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤"
        continue
      fi
      echo "‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç"
      break
    else
      echo "‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    fi
  done
  
  echo ""
  echo "=== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ==="
  echo "Matrix Domain: $MATRIX_DOMAIN"
  echo "Element Domain: $ELEMENT_DOMAIN"
  echo "Admin Domain: $ADMIN_DOMAIN"
  echo "Admin User: $ADMIN_USER"
  echo "Server Type: $SERVER_TYPE"
  echo "Bind Address: $BIND_ADDRESS"
  echo "DB Password: [–°–ö–†–´–¢ - ${#DB_PASSWORD} —Å–∏–º–≤–æ–ª–æ–≤]"
  echo ""
  
  read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É? (y/N): " confirm
  if [[ $confirm != [yY] ]]; then
    echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
    exit 0
  fi
  
  # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
  echo "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
  mkdir -p /opt/synapse-data
  mkdir -p /opt/synapse-config
  mkdir -p /opt/element-web
  mkdir -p /opt/synapse-admin
  mkdir -p /opt/coturn
  
  # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Synapse
  echo "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Synapse..."
  
  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∑–∞—Ä–∞–Ω–µ–µ
  chown -R 991:991 /opt/synapse-data
  
  # –°–∏–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º-–∞—É—Ç –¥–ª—è –ø–µ—Ä–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  timeout 300 docker run --rm \
    --mount type=bind,source=/opt/synapse-data,target=/data \
    -e SYNAPSE_SERVER_NAME="$MATRIX_DOMAIN" \
    -e SYNAPSE_REPORT_STATS=no \
    matrixdotorg/synapse:$SYNAPSE_VERSION generate
    
  if [ $? -ne 0 ]; then
    echo "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    exit 1
  fi
  
  echo "‚úÖ –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∫–ª—é—á –ø–æ–¥–ø–∏—Å–∏ —Å–æ–∑–¥–∞–Ω—ã"
  
  # –í–ê–ñ–ù–û: –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –Ω–∞—à—É —É–ª—É—á—à–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ë–ï–ó –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –∫–ª—é—á–∞
  create_synapse_config "$MATRIX_DOMAIN" "$DB_PASSWORD" "$REGISTRATION_SHARED_SECRET" "$TURN_SECRET" "$ADMIN_USER"
  create_element_config "$MATRIX_DOMAIN" "$ADMIN_USER"
  create_synapse_admin_config "$MATRIX_DOMAIN"
  create_coturn_config "$MATRIX_DOMAIN" "$TURN_SECRET" "$PUBLIC_IP" "$LOCAL_IP"
  
  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
  chown -R 991:991 /opt/synapse-data
  
  # –°–æ–∑–¥–∞–Ω–∏–µ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  create_docker_compose "$MATRIX_DOMAIN" "$DB_PASSWORD" "$BIND_ADDRESS"
  
  # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ—ç—Ç–∞–ø–Ω–æ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
  echo "–ó–∞–ø—É—Å–∫ Matrix —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ—ç—Ç–∞–ø–Ω–æ..."
  cd /opt/synapse-config
  
  echo "1. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤..."
  if ! docker compose pull; then
    echo "‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤"
    exit 1
  fi
  
  echo "2. –ó–∞–ø—É—Å–∫ PostgreSQL..."
  if ! docker compose up -d postgres; then
    echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ PostgreSQL"
    docker compose logs postgres
    exit 1
  fi
  
  echo "3. –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL..."
  for i in {1..12}; do
    if docker exec matrix-postgres pg_isready -U matrix >/dev/null 2>&1; then
      echo "   ‚úÖ PostgreSQL –≥–æ—Ç–æ–≤!"
      break
    elif [ $i -eq 12 ]; then
      echo "   ‚ùå PostgreSQL –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏:"
      docker logs matrix-postgres --tail 20
      exit 1
    else
      echo "   –û–∂–∏–¥–∞–Ω–∏–µ PostgreSQL... ($i/12)"
      sleep 5
    fi
  done
  
  echo "4. –ó–∞–ø—É—Å–∫ Synapse..."
  if ! docker compose up -d synapse; then
    echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Synapse"
    docker compose logs synapse
    exit 1
  fi
  
  echo "5. –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Synapse..."
  for i in {1..24}; do
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º healthcheck –∏ API
    if curl -s http://localhost:8008/health >/dev/null 2>&1; then
      echo "   ‚úÖ Synapse –≥–æ—Ç–æ–≤!"
      break
    elif [ $i -eq 24 ]; then
      echo "   ‚ùå Synapse –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:"
      echo ""
      echo "=== –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ==="
      docker ps --filter "name=matrix-synapse"
      echo ""
      echo "=== –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ Synapse ==="
      docker logs matrix-synapse --tail 30
      echo ""
      echo "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ==="
      docker exec matrix-synapse python -m synapse.config -c /data/homeserver.yaml 2>&1 || echo "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
      echo ""
      echo "=== –°–µ—Ç–µ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ==="
      docker exec matrix-synapse netstat -tlnp 2>/dev/null || echo "netstat –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
      exit 1
    else
      echo "   –û–∂–∏–¥–∞–Ω–∏–µ Synapse... ($i/24)"
      sleep 10
    fi
  done
  
  echo "6. –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤..."
  if ! docker compose up -d element-web synapse-admin; then
    echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤"
    docker compose logs element-web
    docker compose logs synapse-admin
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
  fi
  
  echo "7. –ó–∞–ø—É—Å–∫ Coturn..."
  echo "   –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ Coturn —Å —Ç–∞–π–º-–∞—É—Ç–æ–º 30 —Å–µ–∫—É–Ω–¥..."
  
  # –ó–∞–ø—É—Å–∫ Coturn —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º-–∞—É—Ç–æ–º
  if timeout 30 docker compose up -d coturn; then
    echo "   ‚úÖ Coturn –±—ã—Å—Ç—Ä–æ –∑–∞–ø—É—â–µ–Ω"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ Coturn –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
    sleep 5
    if docker ps | grep -q "matrix-coturn.*Up"; then
      echo "   ‚úÖ Coturn –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—â–∏–π"
    else
      echo "   ‚ö†Ô∏è  Coturn –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –Ω–æ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ"
      echo "   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs matrix-coturn"
    fi
    
  else
    echo "   ‚ö†Ô∏è  Coturn –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ 30 —Å–µ–∫—É–Ω–¥"
    echo "   –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ —Å–µ—Ç–∏ –∏–ª–∏ –ø–æ—Ä—Ç–æ–≤"
    echo ""
    echo "   üîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:"
    echo "   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –ø–æ—Ä—Ç—ã 3478/udp –∏ 49160-49200/udp –Ω–µ –∑–∞–Ω—è—Ç—ã:"
    echo "      netstat -tulpn | grep -E '(3478|4916[0-9]|4917[0-9]|4918[0-9]|4919[0-9]|4920[0-9])'"
    echo ""
    echo "   2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å Coturn –≤—Ä—É—á–Ω—É—é –ø–æ–∑–∂–µ:"
    echo "      cd /opt/synapse-config && docker compose up -d coturn"
    echo ""
    echo "   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Coturn:"
    echo "      docker logs matrix-coturn"
    echo ""
    echo "   ‚ö†Ô∏è  Matrix –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ë–ï–ó Coturn (—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤ –≤–Ω—É—Ç—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏)"
    echo "   Coturn –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤ —á–µ—Ä–µ–∑ NAT/firewall"
    echo ""
  fi
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
  echo ""
  echo "=== –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ==="
  docker compose ps
  
  echo ""
  echo "=== –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤ ==="
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ Synapse API
  if curl -s http://localhost:8008/_matrix/client/versions >/dev/null; then
    echo "‚úÖ Synapse API –¥–æ—Å—Ç—É–ø–µ–Ω"
  else
    echo "‚ùå Synapse API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
  fi
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ Element Web
  if curl -s http://localhost:8080/ >/dev/null; then
    echo "‚úÖ Element Web –¥–æ—Å—Ç—É–ø–µ–Ω"
  else
    echo "‚ö†Ô∏è  Element Web –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
  fi
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ Synapse Admin
  if curl -s http://localhost:8081/ >/dev/null; then
    echo "‚úÖ Synapse Admin –¥–æ—Å—Ç—É–ø–µ–Ω"
  else
    echo "‚ö†Ô∏è  Synapse Admin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
  fi
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
  if docker exec matrix-postgres pg_isready -U matrix >/dev/null 2>&1; then
    echo "‚úÖ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç"
  else
    echo "‚ùå PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
  fi
  
  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Caddy (—Ç–æ–ª—å–∫–æ –¥–ª—è hosting)
  install_caddy
  
  # –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  echo ""
  echo "================================================================="
  echo "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Matrix v6.0 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
  echo "================================================================="
  echo ""
  echo "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–µ:"
  echo "  Matrix Server: https://$MATRIX_DOMAIN"
  echo "  Element Web:   https://$ELEMENT_DOMAIN"
  echo "  Synapse Admin: https://$ADMIN_DOMAIN"
  echo ""
  echo "üîê –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
  echo "  Admin User: $ADMIN_USER"
  echo "  DB Password: [–°–ö–†–´–¢] (${#DB_PASSWORD} —Å–∏–º–≤–æ–ª–æ–≤)"
  echo "  Registration Secret: $REGISTRATION_SHARED_SECRET"
  echo "  TURN Secret: $TURN_SECRET"
  echo ""
  echo "üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
  echo "  docker exec -it matrix-synapse register_new_matrix_user \\"
  echo "    -c /data/homeserver.yaml -u $ADMIN_USER --admin http://localhost:8008"
  echo ""
  echo "‚ÑπÔ∏è  Signing key –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω Synapse –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"
  echo "================================================================="
  
  read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
}

# –§—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
diagnose_containers() {
  echo "=== –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Matrix –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ==="
  echo ""
  
  cd /opt/synapse-config 2>/dev/null || { echo "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"; return 1; }
  
  echo "üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
  docker compose ps
  echo ""
  
  echo "üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:"
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  for container in matrix-postgres matrix-synapse matrix-element-web matrix-synapse-admin matrix-coturn; do
    echo ""
    echo "--- $container ---"
    
    if docker ps | grep -q "$container"; then
      echo "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω"
      
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ healthcheck
      health=$(docker inspect --format='{{.State.Health.Status}}' "$container" 2>/dev/null || echo "no healthcheck")
      echo "Healthcheck: $health"
      
      # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Element Web
      if [ "$container" = "matrix-element-web" ] && [ "$health" = "unhealthy" ]; then
        echo ""
        echo "üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º Element Web:"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –¥–æ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        DOMAIN_CONFIG_ERROR=$(docker logs "$container" 2>&1 | grep -o 'config\.[a-zA-Z0-9.-]*\.json.*404' | head -1)
        if [ -n "$DOMAIN_CONFIG_ERROR" ]; then
          MISSING_DOMAIN=$(echo "$DOMAIN_CONFIG_ERROR" | grep -o 'config\.[a-zA-Z0-9.-]*\.json' | sed 's/config\.//' | sed 's/\.json//')
          echo "   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è $MISSING_DOMAIN"
          echo "   üí° –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é '13. üåê –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Element Web'"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if curl -s http://localhost:8080/config.json >/dev/null 2>&1; then
          echo "   ‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞"
        else
          echo "   ‚ùå –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        fi
      fi
      
      # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
      echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:"
      docker logs "$container" --tail 10 2>&1 | sed 's/^/  /'
      
    else
      echo "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
      echo "–õ–æ–≥–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞:"
      docker logs "$container" --tail 15 2>&1 | sed 's/^/  /' || echo "  –õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    fi
  done
  
  echo ""
  echo "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ—Ä—Ç–æ–≤:"
  netstat -tulpn | grep -E "(8008|8080|8081|8448|3478)" | head -10
  
  echo ""
  echo "üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:"
  du -sh /opt/synapse-data /opt/synapse-config /opt/element-web /opt/synapse-admin /opt/coturn 2>/dev/null || echo "–ù–µ—Å–∫–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
  
  echo ""
  echo "üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:"
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤
  if [ -f "/opt/synapse-data/homeserver.yaml" ]; then
    echo "‚úÖ homeserver.yaml —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ($(wc -l < /opt/synapse-data/homeserver.yaml) —Å—Ç—Ä–æ–∫)"
  else
    echo "‚ùå homeserver.yaml –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
  fi
  
  if [ -f "/opt/synapse-config/docker-compose.yml" ]; then
    echo "‚úÖ docker-compose.yml —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
  else
    echo "‚ùå docker-compose.yml –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
  fi
  
  if [ -f "/opt/element-web/config.json" ]; then
    echo "‚úÖ Element config.json —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    DOMAIN_CONFIGS=$(find /opt/element-web -name "config.*.json" 2>/dev/null | wc -l)
    if [ "$DOMAIN_CONFIGS" -gt 0 ]; then
      echo "   –î–æ–º–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: $DOMAIN_CONFIGS"
      find /opt/element-web -name "config.*.json" 2>/dev/null | sed 's/^/     - /'
    else
      echo "   ‚ö†Ô∏è  –î–æ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (–º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è)"
    fi
  else
    echo "‚ùå Element config.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
  fi
  
  echo ""
  echo "üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:"
  echo "  docker compose logs [service]     # –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞"
  echo "  docker compose restart [service]  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"
  echo "  docker compose down && docker compose up -d  # –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"
  echo "  docker exec -it matrix-synapse bash  # –í—Ö–æ–¥ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Synapse"
  
  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–±–ª–µ–º
  echo ""
  echo "üö® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã Element Web
  if docker logs matrix-element-web 2>&1 | grep -q "config\.[a-zA-Z0-9.-]*\.json.*404"; then
    echo "   ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ–º–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ Element Web"
    echo "      ‚Üí –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é '13. üåê –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Element Web'"
  fi
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã Coturn
  if ! docker ps | grep -q "matrix-coturn.*Up"; then
    echo "   ‚ö†Ô∏è  Coturn –Ω–µ –∑–∞–ø—É—â–µ–Ω - VoIP –∑–≤–æ–Ω–∫–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å"
    echo "      ‚Üí –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é '11. üìû –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Coturn (VoIP —Å–µ—Ä–≤–µ—Ä)'"
  fi
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã Synapse
  if ! curl -s http://localhost:8008/health >/dev/null 2>&1; then
    echo "   ‚ùå Synapse API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞"
    echo "      ‚Üí –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é '3. üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã'"
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services_sequentially() {
  cd /opt/synapse-config 2>/dev/null || { echo "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"; return 1; }
  
  echo "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ..."
  
  echo "1. –ó–∞–ø—É—Å–∫ PostgreSQL..."
  if ! docker compose up -d postgres; then
    echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ PostgreSQL"
    docker compose logs postgres
    return 1
  fi
  
  echo "2. –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL..."
  for i in {1..12}; do
    if docker exec matrix-postgres pg_isready -U matrix >/dev/null 2>&1; then
      echo "   ‚úÖ PostgreSQL –≥–æ—Ç–æ–≤!"
      break
    elif [ $i -eq 12 ]; then
      echo "   ‚ùå PostgreSQL –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
      docker logs matrix-postgres --tail 20
      return 1
    else
      echo "   –û–∂–∏–¥–∞–Ω–∏–µ PostgreSQL... ($i/12)"
      sleep 5
    fi
  done
  
  echo "3. –ó–∞–ø—É—Å–∫ Synapse..."
  if ! docker compose up -d synapse; then
    echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Synapse"
    docker compose logs synapse
    return 1
  fi
  
  echo "4. –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Synapse..."
  for i in {1..24}; do
    if curl -s http://localhost:8008/health >/dev/null 2>&1; then
      echo "   ‚úÖ Synapse –≥–æ—Ç–æ–≤!"
      break
    elif [ $i -eq 24 ]; then
      echo "   ‚ùå Synapse –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
      docker logs matrix-synapse --tail 30
      return 1
    else
      echo "   –û–∂–∏–¥–∞–Ω–∏–µ Synapse... ($i/24)"
      sleep 10
    fi
  done
  
  echo "5. –ó–∞–ø—É—Å–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
  if ! docker compose up -d; then
    echo "‚ö†Ô∏è  –í–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."
    echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ö —Å—Ç–∞—Ç—É—Å –∏ –ª–æ–≥–∏."
  fi
  
  echo "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã."
  docker compose ps
}

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
restart_services() {
  echo "=== –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Matrix —Å–µ—Ä–≤–∏—Å–æ–≤ ==="
  
  if [ -f "/opt/synapse-config/docker-compose.yml" ]; then
    cd /opt/synapse-config
    echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker compose stop
    echo "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    start_services_sequentially
    
    echo "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏..."
    sleep 5
    check_status
  else
    echo "‚ùå Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
  fi
}

# –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Docker (–ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
manage_docker() {
  echo "=== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏ ==="
  echo ""
  echo "1. –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
  echo "2. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)"
  echo "3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ"
  echo "4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ"
  echo "5. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ"
  echo "6. –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
  echo "7. –ù–∞–∑–∞–¥"
  echo ""
  read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-7): " docker_choice
  
  cd /opt/synapse-config 2>/dev/null || { echo "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"; return 1; }
  
  case $docker_choice in
    1) 
      echo "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
      docker compose ps
      ;;
    2) 
      echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º 60 —Å–µ–∫—É–Ω–¥..."
      timeout 60 docker compose stop || {
        echo "‚ö†Ô∏è  –¢–∞–π–º–∞—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É (–æ–ø—Ü–∏—è 5)"
      }
      ;;
    3) 
      echo "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ..."
      start_services_sequentially
      ;;
    4) 
      echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
      restart_services
      ;;
    5)
      echo "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
      docker stop matrix-synapse matrix-postgres matrix-element-web matrix-synapse-admin matrix-coturn 2>/dev/null || true
      echo "‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
      ;;
    6) 
      read -p "‚ùó –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã Matrix! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " confirm
      if [[ $confirm == [yY] ]]; then
        echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
        timeout 60 docker compose down || docker stop matrix-synapse matrix-postgres matrix-element-web matrix-synapse-admin matrix-coturn 2>/dev/null
        docker compose down --remove-orphans
        echo "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É–¥–∞–ª–µ–Ω—ã"
      fi ;;
    7) return 0 ;;
    *) echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä" ;;
  esac
  
  read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ª–æ–≥–æ–≤
show_logs() {
  echo "=== –õ–æ–≥–∏ Matrix —Å–µ—Ä–≤–∏—Å–æ–≤ ==="
  echo ""
  echo "1. Synapse"
  echo "2. PostgreSQL"
  echo "3. Element Web"
  echo "4. Synapse Admin"
  echo "5. Coturn"
  echo "6. –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
  echo "7. –ù–∞–∑–∞–¥"
  echo ""
  read -p "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å (1-7): " log_choice
  
  case $log_choice in
    1) 
      echo "–õ–æ–≥–∏ Synapse (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫, –Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
      docker logs -f matrix-synapse --tail 50
      ;;
    2) 
      echo "–õ–æ–≥–∏ PostgreSQL (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫, –Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
      docker logs -f matrix-postgres --tail 50
      ;;
    3) 
      echo "–õ–æ–≥–∏ Element Web (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫, –Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
      docker logs -f matrix-element-web --tail 50
      ;;
    4) 
      echo "–õ–æ–≥–∏ Synapse Admin (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫, –Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
      docker logs -f matrix-synapse-admin --tail 50
      ;;
    5) 
      echo "–õ–æ–≥–∏ Coturn (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫, –Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
      docker logs -f matrix-coturn --tail 50
      ;;
    6) 
      cd /opt/synapse-config 2>/dev/null || return 1
      echo "–õ–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (–Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
      docker compose logs -f
      ;;
    7) return 0 ;;
    *) echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä" ;;
  esac
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
show_secrets() {
  echo "=== –°–µ–∫—Ä–µ—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ==="
  echo ""
  
  if [ -f "/opt/synapse-data/homeserver.yaml" ]; then
    echo "üîê –ò–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Synapse:"
    echo "Registration Secret:"
    grep "registration_shared_secret:" /opt/synapse-data/homeserver.yaml | cut -d'"' -f2
    echo ""
    echo "TURN Secret:"
    grep "turn_shared_secret:" /opt/synapse-data/homeserver.yaml | cut -d'"' -f2
    echo ""
  fi
  
  if [ -f "/opt/synapse-config/docker-compose.yml" ]; then
    echo "üíæ Database Password:"
    grep "POSTGRES_PASSWORD=" /opt/synapse-config/docker-compose.yml | cut -d'=' -f2
    echo ""
  fi
  
  echo "‚ÑπÔ∏è  –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω—ã –¥–ª—è —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤"
  read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
}

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
update_containers() {
  echo "=== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Matrix –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ==="
  
  cd /opt/synapse-config 2>/dev/null || { echo "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"; return 1; }
  
  echo "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π..."
  docker compose pull
  
  echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å –Ω–æ–≤—ã–º–∏ –æ–±—Ä–∞–∑–∞–º–∏..."
  docker compose up -d
  
  echo "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
  docker image prune -f
  
  echo "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
  sleep 2
  check_status
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Coturn –æ—Ç–¥–µ–ª—å–Ω–æ
manage_coturn() {
  echo "=== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Coturn TURN —Å–µ—Ä–≤–µ—Ä–æ–º ==="
  echo ""
  echo "1. –°—Ç–∞—Ç—É—Å Coturn"
  echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç—å Coturn"
  echo "3. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Coturn"
  echo "4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Coturn"
  echo "5. –õ–æ–≥–∏ Coturn"
  echo "6. –¢–µ—Å—Ç –ø–æ—Ä—Ç–æ–≤ Coturn"
  echo "7. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Coturn"
  echo "8. –ù–∞–∑–∞–¥"
  echo ""
  read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-8): " coturn_choice
  
  case $coturn_choice in
    1)
      echo "–°—Ç–∞—Ç—É—Å Coturn:"
      if docker ps | grep -q "matrix-coturn"; then
        echo "‚úÖ Coturn –∑–∞–ø—É—â–µ–Ω"
        docker ps --filter "name=matrix-coturn" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
      else
        echo "‚ùå Coturn –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        echo "–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å:"
        docker ps -a --filter "name=matrix-coturn" --format "table {{.Names}}\t{{.Status}}"
      fi
      ;;
    2)
      echo "–ó–∞–ø—É—Å–∫ Coturn..."
      cd /opt/synapse-config 2>/dev/null || { echo "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"; return 1; }
      if timeout 30 docker compose up -d coturn; then
        echo "‚úÖ Coturn –∑–∞–ø—É—â–µ–Ω"
      else
        echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Coturn"
        echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs matrix-coturn"
      fi
      ;;
    3)
      echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Coturn..."
      docker stop matrix-coturn 2>/dev/null && echo "‚úÖ Coturn –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" || echo "‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
      ;;
    4)
      echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Coturn..."
      cd /opt/synapse-config 2>/dev/null || { echo "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"; return 1; }
      docker compose restart coturn && echo "‚úÖ Coturn –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω" || echo "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"
      ;;
    5)
      echo "–õ–æ–≥–∏ Coturn (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫, Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
      docker logs -f matrix-coturn --tail 50 2>/dev/null || echo "‚ùå –õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
      ;;
    6)
      echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ Coturn..."
      echo "UDP –ø–æ—Ä—Ç 3478 (TURN):"
      netstat -tulpn | grep ":3478" || echo "–ü–æ—Ä—Ç 3478 –Ω–µ —Å–ª—É—à–∞–µ—Ç—Å—è"
      echo ""
      echo "UDP –ø–æ—Ä—Ç—ã 49160-49200 (media relay):"
      netstat -tulpn | grep -E ":(4916[0-9]|4917[0-9]|4918[0-9]|4919[0-9]|4920[0-9])" | head -5 || echo "–ü–æ—Ä—Ç—ã –º–µ–¥–∏–∞ –Ω–µ —Å–ª—É—à–∞—é—Ç—Å—è"
      echo ""
      echo "–ï—Å–ª–∏ –ø–æ—Ä—Ç—ã –Ω–µ —Å–ª—É—à–∞—é—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Coturn"
      ;;
    7)
      echo "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Coturn..."
      if [ -f "/opt/synapse-data/homeserver.yaml" ]; then
        MATRIX_DOMAIN=$(grep "server_name:" /opt/synapse-data/homeserver.yaml | head -1 | sed 's/server_name: *"//' | sed 's/"//')
        TURN_SECRET=$(grep "turn_shared_secret:" /opt/synapse-data/homeserver.yaml | cut -d'"' -f2)
        PUBLIC_IP=$(curl -s -4 https://ifconfig.co || echo "auto-detect")
        LOCAL_IP=$(hostname -I | awk '{print $1}')
        
        create_coturn_config "$MATRIX_DOMAIN" "$TURN_SECRET" "$PUBLIC_IP" "$LOCAL_IP"
        echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Coturn"
      else
        echo "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Synapse –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
      fi
      ;;
    8) return 0 ;;
    *) echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä" ;;
  esac
  
  read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Docker Compose –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Element Web
fix_element_web_docker_mount() {
  echo "=== –†—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Element Web ==="
  echo ""
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
  if [ ! -f "/opt/element-web/config.json" ]; then
    echo "‚ùå –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥ Element Web –Ω–µ –Ω–∞–π–¥–µ–Ω"
    return 1
  fi
  
  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  DOMAIN_CONFIG=$(find /opt/element-web -name "config.*.json" | head -1)
  if [ -z "$DOMAIN_CONFIG" ]; then
    echo "‚ùå –î–æ–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Element Web –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    echo "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–ø—Ü–∏—é 13 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    return 1
  fi
  
  DOMAIN_FILE=$(basename "$DOMAIN_CONFIG")
  echo "üìã –ù–∞–π–¥–µ–Ω–∞ –¥–æ–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: $DOMAIN_FILE"
  
  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Element Web
  echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Element Web –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
  docker stop matrix-element-web 2>/dev/null || true
  
  # Backup Docker Compose
  cd /opt/synapse-config 2>/dev/null || { echo "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"; return 1; }
  cp docker-compose.yml docker-compose.yml.backup.manual.$(date +%s)
  
  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Python –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
  echo "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
  
python3 << EOF
import re

compose_file = "/opt/synapse-config/docker-compose.yml"

try:
    with open(compose_file, 'r') as f:
        content = f.read()
    
    # –ò—â–µ–º —Å–µ–∫—Ü–∏—é element-web –∏ –∑–∞–º–µ–Ω—è–µ–º volumes
    pattern = r'(element-web:.*?volumes:\s*\n)(.*?)(^\s{2}\w|\Z)'
    
    def replace_volumes(match):
        prefix = match.group(1)
        suffix = match.group(3) if match.group(3) and not match.group(3).strip() == '' else ''
        
        new_volumes = '''      - /opt/element-web/config.json:/app/config.json:ro
      - /opt/element-web/$DOMAIN_FILE:/app/$DOMAIN_FILE:ro
'''
        return prefix + new_volumes + suffix
    
    new_content = re.sub(pattern, replace_volumes, content, flags=re.MULTILINE | re.DOTALL)
    
    with open(compose_file, 'w') as f:
        f.write(new_content)
    
    print("‚úÖ Docker Compose –æ–±–Ω–æ–≤–ª–µ–Ω")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
EOF
  
  # –ó–∞–ø—É—Å–∫ Element Web
  echo "–ó–∞–ø—É—Å–∫ Element Web..."
  docker compose up -d element-web
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞
  echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞..."
  sleep 3
  
  if curl -s "http://localhost:8080/$DOMAIN_FILE" | grep -q "default_server_config"; then
    echo "‚úÖ –î–æ–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∞!"
  else
    echo "‚ùå –î–æ–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å—ë –µ—â—ë –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    echo ""
    echo "üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:"
    echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
    docker exec matrix-element-web ls -la /app/config*.json
    echo ""
    echo "–ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Docker Compose:"
    grep -A 10 -B 2 "volumes:" docker-compose.yml | grep -A 12 element-web
  fi
}

# –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
show_menu() {
  clear
  echo "=================================================================="
  echo "              Matrix Setup & Repair Tool v6.0"
  echo "                    Enhanced Docker Edition"
  echo "=================================================================="
  echo "1.  üöÄ –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Matrix —Å–∏—Å—Ç–µ–º—ã (Docker)"
  echo "2.  üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
  echo "3.  üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
  echo "4.  üë§ –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)"
  echo "5.  üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏"
  echo "6.  üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"
  echo "7.  üîê –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ä–µ—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
  echo "8.  üÜô –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
  echo "9.  üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
  echo "10. üîë –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–ª—é—á –ø–æ–¥–ø–∏—Å–∏ Synapse"
  echo "11. üìû –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Coturn (VoIP —Å–µ—Ä–≤–µ—Ä)"
  echo "12. ‚öôÔ∏è  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Synapse (—Ñ–µ–¥–µ—Ä–∞—Ü–∏—è, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)"
  echo "13. üåê –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Element Web"
  echo "14. üõ†Ô∏è  –†—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Docker –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Element Web"
  echo "15. ‚ùå –í—ã—Ö–æ–¥"
  echo "=================================================================="
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Synapse
manage_synapse_module() {
  local manage_script="./manage-synapse.sh"
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
  if [ ! -f "$manage_script" ]; then
    echo "‚ùå –ú–æ–¥—É–ª—å manage-synapse.sh –Ω–µ –Ω–∞–π–¥–µ–Ω"
    echo ""
    echo "üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Synapse..."
    
    if command -v wget >/dev/null 2>&1; then
      wget -qO manage-synapse.sh https://raw.githubusercontent.com/gopnikgame/matrix-setup/main/manage-synapse.sh
    elif command -v curl >/dev/null 2>&1; then
      curl -sL https://raw.githubusercontent.com/gopnikgame/matrix-setup/main/manage-synapse.sh -o manage-synapse.sh
    else
      echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –º–æ–¥—É–ª—å (–Ω–µ—Ç wget –∏–ª–∏ curl)"
      echo "–°–∫–∞—á–∞–π—Ç–µ –≤—Ä—É—á–Ω—É—é: https://github.com/gopnikgame/matrix-setup/blob/main/manage-synapse.sh"
      return 1
    fi
    
    chmod +x manage-synapse.sh
    echo "‚úÖ –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∞—á–∞–Ω"
  fi
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
  if [ ! -x "$manage_script" ]; then
    chmod +x "$manage_script"
  fi
  
  # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥—É–ª—å
  echo "üöÄ –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Matrix Synapse..."
  sleep 1
  "$manage_script"
}


# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
while true; do
  show_menu
  read -p "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-15): " choice
  
  case $choice in
    1) full_installation ;;
    2) check_status; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
    3) restart_services; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
    4) create_admin_user; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
    5) manage_docker ;;
    6) show_logs ;;
    7) show_secrets ;;
    8) update_containers; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
    9) diagnose_containers; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
    10) fix_signing_key; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
    11) manage_coturn ;;
    12) manage_synapse_module ;;
    13) fix_element_domain_config; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
    14) fix_element_web_docker_mount; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
    15) echo "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"; exit 0 ;;
    *) echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."; sleep 2 ;;
  esac
done